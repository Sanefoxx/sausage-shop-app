include:
  - template: Security/SAST.gitlab-ci.yml

cache:
  key: $CI_COMMIT_REF_SLUG-backend
  paths:
    - ${CI_PROJECT_DIR}/.m2/repository

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  JAVA_OPTS: -XX:MaxRAMPercentage=90 # для того, чтобы Maven не съел всю свободную оперативку
  SAST_EXCLUDED_ANALYZERS: "eslint-sast,nodejs-scan-sast"
  
stages:
  - build
  - test
  - release
  - deploy-production
  - notify

build-backend-job: # задача с именем build-code-job
  stage: build   # этап build
  script:
    - cd backend
    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository -Dversion.application=${VERSION} # запуск сборки кода
#  rules: # rules и only в данных случаях взаимозаменяемы
#    - changes:
#        - backend/*

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}

upload-backend-release:
  stage: release
  allow_failure: true
  script:
    - cd backend
    - mvn deploy -DskipTests -Dversion.application=${VERSION} -Dmaven.repo.local=${MAVEN_REPO_PATH} -s settings.xml
#  rules:
#    - changes:
#        - backend/*

deploy-backend-prod:
  stage: deploy-production
  when: manual
  environment:
    name: backend-prod/$CI_COMMIT_REF_SLUG
  before_script:
    #устанавливаем ssh-agent для удобства аутентификации по ssh
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    #сохраняем сгенеренный ранее приватный ключ для раннера
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 600 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./backend/sausage-store-backend.service ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/sausage-store-backend.service
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "CURRENT_VERSION=${VERSION}";
       export "VERSION=${VERSION}";
       export "DEV_HOST=${DEV_HOST}";
       export "NEXUS_REPO_URL=${NEXUS_REPO_URL_BACKEND}";
       export "NEXUS_REPO_USER=${NEXUS_REPO_USER}";
       export 'NEXUS_REPO_PASS=${NEXUS_REPO_PASS}';
       export "PSQL_USER=${PSQL_USER}";
       export "PSQL_PASSWORD=${PSQL_PASSWORD}";
       export "PSQL_HOST=${PSQL_HOST}";
       export "PSQL_PORT=${PSQL_PORT}";
       export "PSQL_DBNAME=${PSQL_DBNAME}";
       export "PSQL_ADMIN=${PSQL_ADMIN}";
       export "MONGO_HOST=${MONGO_HOST}";
       export "MONGO_USER=${MONGO_USER}"
       export "MONGO_PASSWORD=${MONGO_PASSWORD}";
       export "MONGO_DATABASE=${MONGO_DATABASE}"
       setsid /bin/bash -s " < ./backend/deploy.sh

send-notification:
  stage: notify
  script:
    - "curl -X POST -H 'Content-type: application/json' --data '{\"text\": \"Вышла новая версия бэкенда сосисочной — \'${VERSION}\'.
       Скачать можно по ссылке — <\'${NEXUS_REPO_URL_BACKEND}\'com/yandex/practicum/devops/sausage-store/\'${VERSION}\'/sausage-store-\'${VERSION}\'.jar|Link to backend>. \"}'
       https://hooks.slack.com/services/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"
