stages:
  - module-pipelines
  - deploy-vault

frontend:
  stage: module-pipelines
  trigger:
    include:
      - "/frontend/.gitlab-ci.yml"
    strategy: depend # depend нужен, если какой-нибудь дочерний пайплайн свалился, мы знали, что общий пайплайн тоже идёт с ошибкой
  only:
    changes: # как только происходит изменение в папке frontend, запускается дочерний пайплайн, который лежит в этой папке
      - frontend/**/*

backend:
  stage: module-pipelines
  trigger:
    include:
      - "/backend/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:  # как только происходит изменение в папке backend, запускается дочерний пайплайн, который лежит в этой папке
      - backend/**/*

backend-report:
  stage: module-pipelines
  trigger:
    include:
      - "/backend-report/.gitlab-ci.yml"
    strategy: depend
  only:
    changes:
      - backend-report/**/*

deploy-vault:
  stage: deploy-vault
  image: alpine:3.15.0
  when: manual
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp ./docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
      export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
      export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
      export "CI_REGISTRY=${CI_REGISTRY}";
      export "VAULT_TOKEN=${VAULT_TOKEN}"
      export "MONGODB_URL=${MONGODB_URL}"
      export "DATASRC_PASS_PSQL=${DATASRC_PASS_PSQL}";
      export "PSQL_DATASRC=${PSQL_DATASRC}";
      export "TEST_DATASRC_PSQL_USER=${TEST_DATASRC_PSQL_USER}";
      export "TEST_DATASRC_PSQL_PASS=${TEST_DATASRC_PSQL_PASS}";
      /bin/bash -s " < vault_deploy.sh
