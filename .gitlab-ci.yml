stages:
  - build
  - test
  - release
  - notify

include:
  - template: Security/SAST.gitlab-ci.yml

build-code-job: # задача с именем build-code-job
  stage: build   # этап build
  script: # объявление скрипта
    - echo "ARTIFACT_JOB_ID=${CI_JOB_ID}" > CI_JOB_ID.txt  # сохранение номера задачи в файл, чтобы в дальнейшем использовать для копирования артефакта
    - cd backend
    - mvn package -Dmaven.repo.local=${CI_PROJECT_DIR}/.m2/repository # запуск сборки кода
    - cd ../frontend
    - npm install karma@6.3.20
    - npm install # загрузка всех сторонних зависимостей
    - npm run build # запуск сборки кода
    - cd ..
    - mkdir sausage-store-0.0.2  # создание директории, в которую копируются артефакты. Это нужно для организации удобной структуры архива
    - mv backend/target/sausage-store-0.0.2-SNAPSHOT.jar sausage-store-0.0.2/sausage-store-0.0.2.jar # копирование собранного бэкенда
    - mv frontend/dist/frontend sausage-store-0.0.2/public_html # копирование собранного фронтэнда
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/.m2/ # сохранение зависимостей для SAST
      - sausage-store-0.0.2/public_html  # сохранение собранного фронтэнда как артефакт
      - sausage-store-0.0.2/sausage-store-0.0.2.jar # сохранение собранного бэкенда как артефакт
    reports:
      dotenv: CI_JOB_ID.txt # сохранение файла с переменными как артефакт

spotbugs-sast:
  stage: test
  needs:
    - build-code-job
  before_script:
    - cp sausage-store-0.0.2/sausage-store-0.0.2.jar backend/sausage-store-0.0.2.jar
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository
  artifacts:
    reports:
      sast: gl-sast-report.json

sonarqube-backend-sast:
  stage: test
  image: maven:3.8-openjdk-16 # тот самый docker-образ, о котором мы все узнаем в будущем
  script:
    - cd backend
    - >
      mvn verify sonar:sonar -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_BACKEND}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_BACKEND}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}
      
sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:4.7
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONTEND}
      -Dsonar.projectName=${SONAR_PROJECT_NAME_FRONTEND}
      -Dsonar.sources=.
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN}

upload-release: # задача с именем upload-release
  stage: release # этап release
  # only: # запуск этого шага только при изменениях в директориях backend и frontend
  #   changes:
  #   - backend//*
  #   - frontend//*
  script:
    - echo "Get artifact from job ${ARTIFACT_JOB_ID}"
    - > # скачивание артефакта в файл sausage-store-0.0.2.zip
      curl --location --output sausage-store-0.0.2.zip -H "PRIVATE-TOKEN: ${MY_TOKEN}"
      "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/jobs/${ARTIFACT_JOB_ID}/artifacts"
    - > # сохранение артефакта в package registry
      curl -sSL -H "JOB-TOKEN: ${CI_JOB_TOKEN}"
      -T sausage-store-0.0.2.zip "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/sausage-store/${CI_COMMIT_SHA}/"

send-notification:
  stage: notify
  script:
    - "curl -X POST -H 'Content-type: application/json' --data '{\"text\": \"Александр Лисицин собрал приложение.\"}' https://hooks.slack.com/services/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"
    